// //temporary data store
// var users = {};

// using mongo data store:
var mongoose = require('mongoose');
var User = mongoose.model('User');
var Post = mongoose.model('Post');

var LocalStrategy = require('passport-local').Strategy;
var bCrypt = require('bcrypt-nodejs');


module.exports = function(passport){

    // Passport needs to be able to serialize and deserialize users to support persistent login sessions
    // Serialize and deserialize handlers need to be provided a unique ID for each user. We can just use the username because those will be unique:
    passport.serializeUser(function(user, done) {

        // tell passport which id to use for user
        // console.log('serializing user:',user.username);
        // return done(null, user.username);

        console.log('serializing user:', user._id);
        done(null, user._id);

    });

    //Desieralize user will call with the unique id provided by serializeuser
    passport.deserializeUser(function(id, done) {

        // return user object back
        // return done(null, users[username]);
        User.findById(id, function(err, user) {
            console.log('deserializing user:',user.username);
            done(err, user);
        });

    });

    passport.use('login', new LocalStrategy({
            passReqToCallback : true
        },
        function(req, username, password, done) { 

            // check to see if a user exists with that username and password
            User.findOne({ 'username': username }, 
                function(err, user) {

                    // if there is an error
                    if (err) {
                        return done(err);
                    }

                    // if a user is not found in the db
                    if (!user) {
                        console.log('User Not Found with username ' + username);
                        return done(null, false);
                    }

                    // if the password of the found user is not valid
                    if (!isValidPassword(user, password)) {
                        console.log('Invalid Password');
                        return done(null, false);
                    }

                    // if the password is valid for the found user, log them in
                    return done(null, user);
                }
            );

            // login implementation
            // does the user exist?
            // if (!users[username]) {
            //     console.log('User Not Found with username '+username);
            //     return done(null, false);
            // }
            // // is the password valid?
            // if (!isValidPassword(users[username],password)) {
            //     // successfully authenticated
            //     return done(null, users[username]);
            // }
            // else{
            //     console.log('Invalid password '+username);
            //     return done(null, false)
            // }

        }
    ));

    passport.use('signup', new LocalStrategy({
            passReqToCallback : true // allows us to pass back the entire request to the callback
        },
        function(req, username, password, done) {

            // find the first document (query object) that matches the query
            User.findOne({ 'username': username }, function(err, user) {
                if (err) {
                    console.log('Error in SignUp: '+err);
                    return done(err);
                }

                if (user) {
                    // we have already signed this user up 
                    console.log('User already exists with username: '+username);
                    return done(null, false);
                } else {

                    var newUser = new User();
                    newUser.username = username;
                    newUser.password = createHash(password);

                    newUser.save(function(err) {
                        if (err) {
                            console.log('registration successful');
                            throw err;
                        }
                        console.log('successfully signed up user ' + newUser.username);
                        return done(null, newUser);
                    });
                }

            });

            // signup implementation
            // check if the user already exists
            // if (users[username]) {
            //     console.log('User already exists with username: ' + username);
            //     return done(null, false);
            // }

            // add user to db
            // users[username] = {
            //     username: username,
            //     password: createHash(password)
            // }

            // console.log(users[username].username + ' Registration successful');
            // return done(null, users[username]); 

        })
    );
    
    // password is undefined???
    var isValidPassword = function(user, password){
        return bCrypt.compareSync(password, user.password);
    };
    // Generates hash using bCrypt
    var createHash = function(password){
        return bCrypt.hashSync(password, bCrypt.genSaltSync(10), null);
    };

};


