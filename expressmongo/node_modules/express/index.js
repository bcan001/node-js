
module.exports = require('./lib/express');

var express = require('express');
var app = express();
var server = require("http").createServer(app);

var bodyParser = require('body-parser')
app.use(bodyParser.urlencoded({ extended: true }));


app.use(express.static(__dirname + '/public'));


// tell our app that we want to talk to mongo
var mongo = require('mongodb');
// using monk to interact with our mongo db (an alternative is )
var monk = require('monk');
// where our database is located at
var db = monk('localhost:27017/nodetest1');


app.set('view engine', 'jade');


//var usernameRoute = app.route("/:username");



// wrap our db object into every request so it's available at each request
app.use(function(request,response,next){
  request.db = db;
  next();
});


app.get('/', function(request, response) {
	//console.log('hello');
	//response.render('index', { title: 'Title of page' });
	var collection = db.get('usercollection');
	// 'docs' is ALL the data you are getting back (so you can interate through it in the view)
  collection.find({},{},function(e,docs){
    response.render('index', {
        "userlist" : docs
    });
  });

});


app.get('/userlist', function(request, response) {
	//console.log('hello');
	//response.render('index', { title: 'Title of page' });
	var collection = db.get('usercollection');
	// 'docs' is ALL the data you are getting back (so you can interate through it in the view)
  collection.find({},{},function(error,results){
    response.json(results);
  });

});


// add a new user
app.get('/newuser', function(request, response) {
  response.render('newuser', { title: 'Add New User' });
});

app.post('/adduser', function(req, res) {
  // Set our internal DB variable
  var db = req.db;

  // Get our form values. These rely on the "name" attributes
  var userName = req.body.username;
  var userEmail = req.body.useremail;

  // Set our collection
  var collection = db.get('usercollection');

  // Submit to the DB
  collection.insert({
    "username" : userName,
    "email" : userEmail
  }, function (err, doc) {
    if (err) {
        // If it failed, return error
        res.send("There was a problem adding the information to the database.");
    }
    else {
      // If it worked, set the header so the address bar doesn't still say /adduser
      res.location("/");
      // And forward to success page
      res.redirect("/");
    }
  });
});

app.route("/:username").get(function(request, response) {
	 var user = request.params.username;
	 response.render('userpage', { current_user: user});
  })
  // when the delete button is clicked on the userpage, this needs to get fired using ajax
  .delete(function(request, response) {
    var userToDelete = request.params.username;
    var db = request.db;
    var collection = db.get('usercollection');

    // collection.removeById(userToDelete, function(err, result) {
    // 	response.location("index");
    // 	response.redirect("index");
    // });

    response.location("/");
    response.redirect("/");
});



server.listen(3000);
